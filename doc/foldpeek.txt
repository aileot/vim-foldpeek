*foldpeek.txt*

Version: 1.3.0
Author: kaile256 <kaile256acc at gmail.com>
License: MIT license

==============================================================================
CONTENTS						  *foldpeek-contents*

Introduction			|foldpeek-introduction|
Overview			|foldpeek-overview|
Interface			|foldpeek-interface|
	Function			|foldpeek-function|
	Variable			|foldpeek-variable|
Example				|foldpeek-example|
	Example-Variable		|foldpeek-example-variable|
Compatibility			|foldpeek-compatibility|

==============================================================================
INTRODUCTION						     *foldpeek-intro*
	customize your foldtext

Latest version:
https://github.com/kaile256/vim-foldpeek

==============================================================================
OVERVIEW						   *foldpeek-overview*

vim-foldpeek provides some functions and variables to configure. Read the
details in |foldpeek-interface|.
The functions:

| `foldpeek#text()`          | the main function for 'foldtext'   |
| `foldpeek#head()`          | used in |g:foldpeek#head| as default |
| `foldpeek#tail()`          | used in |g:foldpeek#tail| as default |
| `foldpeek#hunk_info()`     | see |foldpeek-overview-git|          |
| `foldpeek#has_any_hunks()` | see |foldpeek-overview-git|          |

The variables:

| |g:foldpeek#local_only|                    | vim-foldpeek won't set 'foldtext' |
| |g:foldpeek#auto_foldcolumn|               |                                   |
| |g:foldpeek#skip_patterns|                 | patterns to the next line in fold |
| |g:foldpeek#override_skip_patterns|        | only use b:foldpeek_skip_patterns |

| |g:foldpeek#indent_with_head|              | modify fold head as indent        |
| |g:foldpeek#head|                          | decorate head of folded line      |
| |g:foldpeek#tail|                          | decorate tail of folded line      |

| |g:foldpeek#disabled_whiteout_styles|      | disable the styles in list |
| |g:foldpeek#whiteout_patterns_left|        | (omitted)                  |
| |g:foldpeek#whiteout_patterns_omit|        | (omitted)                  |
| |g:foldpeek#whiteout_patterns_fill|        | (omitted)                  |
| |g:foldpeek#whiteout_patterns_substitute|  | (omitted)                  |
| |g:foldpeek#whiteout_style_for_foldmarker| | (omitted)                  |

| |g:foldpeek#hunk_sign|   | sign at a fold including any hunks |
| |g:foldpeek#hunk_format| | format of hunk info                |

Most of the variables have buffer-local ones respectively like
|b:foldpeek_skip_patterns|. Follow the tags for more detail.

whiteout					   *foldpeek-overview-whiteout*
	Currently, vim-foldpeek supports the styles:

	left		only show matched patterns.
	omit		omit matched patterns.
	fill		replace with whitespaces as matched patterns length.
	substitute	subsititue as listed.

	For more detail, respectively follow the tags:

	|g:foldpeek#whiteout_patterns_left|,
	|g:foldpeek#whiteout_patterns_omit|,
	|g:foldpeek#whiteout_patterns_fill|,
	|g:foldpeek#whiteout_patterns_substitute|,

git							*foldpeek-overview-git*
	Watch the changes in each folds.
	Related functions:

	`foldpeek#hunk_info()`
	`foldpeek#has_any_hunks()`

	Related variables:

	|g:foldpeek#hunk_sign|
	|g:foldpeek#hunk_format|

	The feature requires another plugin, either
	"https://github.com/neoclide/coc.nvim" with "coc-git" or
	"https://github.com/airblade/vim-gitgutter".

==============================================================================
INTERFACE						 *foldpeek-interface*

------------------------------------------------------------------------------
FUNCTION						   *foldpeek-function*

foldpeek#text()					    *foldpeek-foldpeek#text()*
	Unless g:foldpeek#local_only is set to 1, this function will be set in
	&foldtext. For local use, add
>
	setlocal foldtext=foldpeek#text()
<
	in your vimrc with |autocmd| or under ftplugin/foo.vim.

------------------------------------------------------------------------------
VARIABLES						  *foldpeek-variable*

g:foldpeek#local_only				      *g:foldpeek#local_only*
	(default: 0)
	|foldpeek#text()| won't be set in &foldtext unless
>
	setlocal foldtext=foldpeek#text()
<
	in your vimrc or in commandline.

g:foldpeek#auto_foldcolumn			 *g:foldpeek#auto_foldcolumn*
	(default: 0)
	If not `0`, increase |&foldcolumn| as the highest v:foldlevel of current
	buffer.

g:foldpeek#skip_patterns			   *g:foldpeek#skip_patterns*
b:foldpeek_skip_patterns			   *b:foldpeek_skip_patterns*
	(default: ['^[>#\-=/{!* \t]*$'])
	Set in |List|.
	This value will be compared to the folded lines in regexp match. Check
	the doc by `:help /[]`

	Note:
	<Tab> and pair out of 'foldmarker' with &commentstring (without `%s`)
	close to those is regarded as whitespaces on the comparison.

g:foldpeek#indent_with_head			*g:foldpeek#indent_with_head*
b:foldpeek_indent_with_head			*b:foldpeek_indent_with_head*
	(default: 0)
	Set in |Number|.
	If 0, head of foldtext which is returned by |g:foldpeek#head| or
	|b:foldpeek_head| will be also indented, i.e., head will be located at
	the first non-blank character where you get by "^" in normal mode;
	otherwise, head will be shown at the first character of the line where
	you get by "0" in normal mode.

g:foldpeek#head						    *g:foldpeek#head*
b:foldpeek_head						    *b:foldpeek_head*
	(default: {1: "v:foldlevel > 1 ? v:foldlevel .') ' : v:folddashes"})
	Set in |Dictionary| for head of folded text.
	The keys should be a number which represents lnum of the peeked line
	as the lnum of v:foldstart is `1`. The value of the highest key under
	the peeked lnum will be evaluated.

	If you dislike the change of indent in folded text, add
>
		let g:foldpeek#head = ''
<
	in your vimrc and keep it empty.

	Note: Ambiwidth with a following space
	You should append a space to ambiwidth character for keep the width of
	shown fold text.

g:foldpeek#tail						    *g:foldpeek#tail*
b:foldpeek_tail						    *b:foldpeek_tail*
	(default: {
	\ 1: "' ['. (v:foldend - v:foldstart + 1) .']'",
	\ 2: "' [%PEEK%/'. (v:foldend - v:foldstart + 1) .']'",
	\ })
	Set in |Dictionary| for tail of folded text.
	For more detail, see |g:foldpeek#head| or see |g:foldpeek#table|
	especially for the detail about %PEEK% and for advanced customization.

g:foldpeek#table					    *g:foldpeek#table*
	(default: {})
	Set in |Dictionary| for head/tail in foldtext. No b:var; fill in g:var
	and leave those for |b:foldpeek_head| or |b:foldpeek_tail|, unused.

	Both keys and values must be {expr} which returns in |String|.
	Optionally, each keys can contain a double digit number at head.

	The number is only used to specify priority of substitution and you
	can use the keys as if a variable, with "%" at the both end, in
	|g:foldpeek#head| and so on.

	So you must ignore any 2-digit number to use as a variable. Thus,
	write "%foldlevel%" if you have "50foldlevel" as a key in
	|g:foldpeek#table|.

	See |foldpeek-example-foldpeek#table|.

	Note: %PEEK%					    *foldpeek-%PEEK%*
	Though %PEEK% isn't in the dictionary, "%PEEK%" is reserved as the
	line number that is peeked as the lnum of v:foldstart is equal to `1`.

g:foldpeek#disable_whiteout			*g:foldpeek#disable_whiteout*
b:foldpeek_disable_whiteout			*b:foldpeek_disable_whiteout*
	(default: 0)
	Set in |Number|.
	Because this white-out feature is a bottle neck at speed of this
	plugin, you can disable it.
	The more a tab has folds, the slower vim will be.

g:foldpeek#whiteout_patterns_omit	  *g:foldpeek#whiteout_patterns_omit*
b:foldpeek_whiteout_patterns_omit	  *b:foldpeek_whiteout_patterns_omit*
	(default: [])
	Set in |List|.
	Omit all patterns in given list from foldtext virtually.
	To white-out by filling is a bit faster than by omitting; if you
	prefer fastness to steadier appearance, use
	|g:foldpeek#whiteout_patterns_fill| instead.

	See |foldpeek-example-foldpeek#whiteout|.

g:foldpeek#whiteout_patterns_fill	  *g:foldpeek#whiteout_patterns_fill*
b:foldpeek_whiteout_patterns_fill	  *g:foldpeek_whiteout_patterns_fill*
	(default: [])
	Set in |List|.
	Replace all patterns in given list in foldtext with whitespaces
	virtually.
	For more detail, see |g:foldpeek#whiteout_patterns_omit|.

				   *g:foldpeek#whiteout_style_for_foldmarker*
				   *b:foldpeek_whiteout_style_for_foldmarker*
g:foldpeek#whiteout_style_for_foldmarker
b:foldpeek_whiteout_style_for_foldmarker
	(default: "omit")
	(available: "omit", "fill")
	Set in |String|.
	Decide the style of white-out for pair out of 'foldmarker'. This
	variable is especially for such users who use foldmarkers at head
	of line like
>
	"}}}1 foo bar
	let foobar = 1
<
	Unless explicitly set "fill" in this variable, it is always set to
	"omit"; the behavior is the same as |g:foldpeek#whiteout_patterns_omit|
	and so on.

==============================================================================
FEATURE							    *foldpeek-feature*

whiteout					   *foldpeek-feature-whiteout*
	Currently, vim-foldpeek supports the styles:

	left		only show matched patterns.
	omit		omit matched patterns.
	fill		replace with whitespaces as matched patterns length.
	substitute	subsititue as listed.

	For more detail, see g:foldpeek#whiteout_patterns_foo respectively.

==============================================================================
EXAMPLE							    *foldpeek-example*

------------------------------------------------------------------------------
EXAMPLE-VARIABLE				   *foldpeek-example-variable*

foldpeek#whiteout			  *foldpeek-example-foldpeek#whiteout*
	(reference: |g:foldpeek#skip_patterns|,
	|g:foldpeek#whiteout_patterns_omit|,
	|g:foldpeek#whiteout_patterns_fill|,
	|g:foldpeek#whiteout_style_for_foldmarker|)

In your vimrc,
>
	let g:foldpeek#skip_patterns = [
	      \ '^[\-=/{!* \t]*$',
	      \ "\[\[plugins]]",
	      \ ]

	let g:foldpeek#whiteout_patterns_omit = [
	      \ 'repo = ',
	      \ ]

<
Say, in your toml as a style of dein (a vim's plugin manager) and set
'foldmethod' to "marker", you would write like below:
>
	[[plugin]] #{{{1
	repo = 'kaile256/vim-foldpeek'

	#[[plugin]] #{{{1
	#repo = 'foo/bar'
<
while the whiteout_patterns contains "repo = " in
|g:foldpeek#whiteout_patterns_fill|, you will see as below:
>
	-       'kaile256/vim-foldpeek'                                  [2/3]
	-#       'foo/bar'                                               [2/2]
<
in |g:foldpeek#whiteout_patterns_omit| instead, you will see as below:
>
	-'kaile256/vim-foldpeek'                                         [2/3]
	-#'foo/bar'                                                      [2/2]
<
===============================================================================
COMPATIBILITY					      *foldpeek-compatibility*

Deprecated feature will be all removed in the next update after deprecation
notice.

2020.04.28
* Deprecated: g:foldpeek#head/tail and b:foldpeek_head/tail in Dictionary.
  vim-foldpeek will stop to support them in Dictionary; please use them in
  String.
* Deprecated: g:foldpeek#table will be removed; please override or define
  functions like foldpeek#head() or foldpeek#tail() instead.

2020.04.26
* Remove g:foldpeek#disable_whiteout and b:foldpeek_disable_whiteout; please
  use g:foldpeek#disabled_whiteout_styles and
  b:foldpeek_disabled_whiteout_styles instead.

==============================================================================
vim:ft=help:tw=78:ts=8:sts=8:sw=8:noet:norl:fen
